basePath: /api/v1
definitions:
  models.User:
    properties:
      birthdate:
        example: "1999-10-05"
        type: string
      city:
        example: Lille
        type: string
      country:
        example: FR
        type: string
      email:
        example: henri.martin@qimpl.fr
        type: string
      first_name:
        example: Henri
        type: string
      is_enabled:
        example: true
        type: boolean
      is_owner:
        example: true
        type: boolean
      last_name:
        example: Martin
        type: string
      password:
        example: MyPassword
        type: string
      state:
        example: Haut-De-France
        type: string
      street:
        example: Rue des peupliers
        type: string
      zip:
        example: "59000"
        type: string
    type: object
  models.UserLogin:
    properties:
      email:
        example: henri.martin@qimpl.fr
        type: string
      password:
        example: MyPassword
        type: string
    type: object
  models.UserResetPasswordBody:
    properties:
      password:
        type: string
    type: object
info:
  contact: {}
  license: {}
  title: authentication API
  version: 0.1.0
paths:
  /authenticate:
    post:
      description: Control user credential and generate a new Json Web Token
      parameters:
      - description: UserLogin object
        in: body
        name: UserLogin
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: body
        "400":
          description: Bad Request
          schema:
            type: body
        "422":
          description: Unprocessable Entity
          schema:
            type: body
      summary: Can allow user to login and get an JWT.
      tags:
      - Authentication
  /healthy:
    get:
      description: Check if the current API is alive
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Healthy Check
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User object
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: body
        "400":
          description: Bad Request
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema:
            type: string
      summary: Create user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update an user
      parameters:
      - description: User object
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: body
        "400":
          description: Bad Request
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema:
            type: string
      summary: Update User
      tags:
      - Users
  /user/{user_id}:
    delete:
      description: Delete user data from database
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      responses:
        "204": {}
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Delete user by his id
      tags:
      - Users
    get:
      description: Get user object data from database
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: body
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Get user by his id
      tags:
      - Users
  /user/{user_id}/desactivate:
    put:
      description: Update user is_enabled field into database
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      responses:
        "204": {}
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Desactivate user account by his id.
      tags:
      - Users
  /user/{user_id}/reset/password:
    put:
      description: Update user password field into database
      parameters:
      - description: UserResetPasswordBody object
        in: body
        name: UserResetPasswordBody
        required: true
        schema:
          $ref: '#/definitions/models.UserResetPasswordBody'
      responses:
        "204": {}
        "400":
          description: Bad Request
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema:
            type: string
      summary: Reset user password by his id
      tags:
      - Users
  /user/{user_id}/validate:
    put:
      description: Update user is_enabled field into database
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      responses:
        "204": {}
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Validate user account by his id.
      tags:
      - Users
swagger: "2.0"
