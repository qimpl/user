// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/authenticate": {
            "post": {
                "description": "Control user credential and generate a new Json Web Token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Can allow user to login and get an JWT.",
                "parameters": [
                    {
                        "description": "UserLogin object",
                        "name": "UserLogin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "body"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "body"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "body"
                        }
                    }
                }
            }
        },
        "/time-slots": {
            "post": {
                "description": "Create a new time slot of a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Time Slots"
                ],
                "summary": "Create a new time slot",
                "parameters": [
                    {
                        "description": "TimeSlot information",
                        "name": "TimeSlot",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TimeSlot"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "body"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/time-slots/user/{user_id}": {
            "get": {
                "description": "Get all time slots of a user using his ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Time Slots"
                ],
                "summary": "Get all time slots of a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "body"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/time-slots/{time_slot_id}": {
            "put": {
                "description": "Update Time Slot by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Time Slots"
                ],
                "summary": "Update Time Slot",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Time Slot ID",
                        "name": "time_slot_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Time Slot information",
                        "name": "TimeSlot",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TimeSlot"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "body"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "Get users array objects data from database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get users from database",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "body"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "User object",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "body"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/{user_id}": {
            "get": {
                "description": "Get user object data from database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by his id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "body"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update User by his ID",
                "parameters": [
                    {
                        "description": "User object",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "body"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete user data from database",
                "tags": [
                    "Users"
                ],
                "summary": "Delete user by his id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/{user_id}/anonymize": {
            "put": {
                "description": "Anonymize user data \u0026 set is_deleted boolean to true",
                "tags": [
                    "Users"
                ],
                "summary": "anonymize user account by his id.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/{user_id}/desactivate": {
            "put": {
                "description": "Update user is_enabled field into database",
                "tags": [
                    "Users"
                ],
                "summary": "Desactivate user account by his id.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/{user_id}/reset/password": {
            "put": {
                "description": "Update user password field into database",
                "tags": [
                    "Users"
                ],
                "summary": "Reset user password by his id",
                "parameters": [
                    {
                        "description": "UserResetPasswordBody object",
                        "name": "UserResetPasswordBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserResetPasswordBody"
                        }
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/{user_id}/validate": {
            "put": {
                "description": "Update user is_enabled field into database",
                "tags": [
                    "Users"
                ],
                "summary": "Validate user account by his id.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.NotificationPreferences": {
            "type": "object",
            "properties": {
                "on_email": {
                    "type": "boolean",
                    "example": true
                },
                "on_sms": {
                    "type": "boolean",
                    "example": false
                },
                "user_id": {
                    "type": "string",
                    "example": "cb7bc97f-45b0-4972-8edf-dc7300cc059c"
                }
            }
        },
        "models.TimeSlot": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string",
                    "example": "18:00:00"
                },
                "start_time": {
                    "type": "string",
                    "example": "14:00:00"
                },
                "user_id": {
                    "type": "string"
                },
                "weekday": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "birthdate": {
                    "type": "string",
                    "example": "1999-10-05"
                },
                "city": {
                    "type": "string",
                    "example": "Lille"
                },
                "country": {
                    "type": "string",
                    "example": "FR"
                },
                "email": {
                    "type": "string",
                    "example": "henri.martin@qimpl.fr"
                },
                "first_name": {
                    "type": "string",
                    "example": "Henri"
                },
                "is_admin": {
                    "type": "boolean",
                    "example": true
                },
                "is_deleted": {
                    "type": "boolean",
                    "example": true
                },
                "is_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "is_owner": {
                    "type": "boolean",
                    "example": true
                },
                "is_verified": {
                    "type": "boolean",
                    "example": true
                },
                "last_name": {
                    "type": "string",
                    "example": "Martin"
                },
                "mobile_phone_number": {
                    "type": "string",
                    "example": "0610890978"
                },
                "notification_preferences": {
                    "type": "object",
                    "$ref": "#/definitions/models.NotificationPreferences"
                },
                "password": {
                    "type": "string",
                    "example": "MyPassword"
                },
                "state": {
                    "type": "string",
                    "example": "Haut-De-France"
                },
                "street": {
                    "type": "string",
                    "example": "Rue des peupliers"
                },
                "stripe_customer_id": {
                    "type": "string",
                    "example": "cus_IOwdRp9gIlOjTD"
                },
                "stripe_payment_method_id": {
                    "type": "string",
                    "example": "pm_1Ho8k8CMhQMU3AqAKJwPYAXj"
                },
                "zip": {
                    "type": "string",
                    "example": "59000"
                }
            }
        },
        "models.UserLogin": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "henri.martin@qimpl.fr"
                },
                "password": {
                    "type": "string",
                    "example": "MyPassword"
                }
            }
        },
        "models.UserResetPasswordBody": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1.0",
	Host:        "",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "authentication API",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
